#pragma kernel CSMain

#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#pragma multi_compile _ _SHADOWS_SOFT _SHADOWS_SOFT_LOW _SHADOWS_SOFT_MEDIUM _SHADOWS_SOFT_HIGH
#pragma multi_compile _ _RELIGHT_DEBUG_RADIANCE

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
#include "SH.hlsl"

struct Surfel
{
    float3 position;
    float3 normal;
    float3 albedo;
    float skyMask;
};

RWStructuredBuffer<Surfel> _surfels;
// Layout: [probeSizeX, probeSizeZ, probeSizeY * 9]
RWTexture3D<float3> _coefficientVoxel3D;
Texture3D<float3> _lastFrameCoefficientVoxel3D;

float _skyLightIntensity;
int _indexInProbeVolume;
float _indirectIntensity;
float _coefficientVoxelGridSize;
float4 _probePos;
float4 _coefficientVoxelCorner;
float4 _coefficientVoxelSize;

// =============================== Debugging =================================== //
#ifdef _RELIGHT_DEBUG_RADIANCE
    RWStructuredBuffer<float> _coefficientSH9;
    RWStructuredBuffer<float3> _surfelRadiance;
#endif
// =============================== Debugging =================================== //

static const float N = 32 * 16;

groupshared float3 groupCoefficients[N];

// Convert probe index to 3D texture coordinates
uint3 ProbeIndexToTexture3DCoord(uint probeIndex, uint shIndex, float4 voxelSize)
{
    // Convert 1D probe index to 3D grid coordinates
    uint probeSizeY = uint(voxelSize.y);
    uint probeSizeZ = uint(voxelSize.z);
    
    uint x = probeIndex / (probeSizeY * probeSizeZ);
    uint temp = probeIndex % (probeSizeY * probeSizeZ);
    uint y = temp / probeSizeZ;
    uint z = temp % probeSizeZ;
    
    // Convert to 3D texture coordinates
    // Layout: [probeSizeX, probeSizeZ, probeSizeY * 9]
    uint3 texCoord;
    texCoord.x = x;
    texCoord.y = z;  // Z becomes Y in texture
    texCoord.z = y * 9 + shIndex;  // Y * 9 + SH index
    
    return texCoord;
}

float3 SHProject(int index, float3 dir)
{
    switch (index)
    {
        case 0: return SH(0, 0, dir);
        case 1: return SH(1, -1, dir);
        case 2: return SH(1, 0, dir);
        case 3: return SH(1, 1, dir);
        case 4: return SH(2, -2, dir);
        case 5: return SH(2, -1, dir);
        case 6: return SH(2, 0, dir);
        case 7: return SH(2, 1, dir);
        case 8: return SH(2, 2, dir);
        default: return 0;
    }
}

float3 EvaluateSurfelRadiance(Surfel surfel, Light mainLight, float3 dir)
{
    // mainlight shadow mask in URP
    float4 shadowCoord = TransformWorldToShadowCoord(surfel.position);
    float atten = SampleShadowmap(
        TEXTURE2D_ARGS(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), 
        shadowCoord, 
        GetMainLightShadowSamplingData(), 
        GetMainLightShadowParams(), 
        false
    );

    // radiance from light
    float NdotL = saturate(dot(surfel.normal, mainLight.direction));
    float3 directLight = surfel.albedo * mainLight.color * NdotL * atten * (1.0 - surfel.skyMask);

    // radiance from sky
    float3 skyLight = SAMPLE_TEXTURECUBE_LOD(_GlossyEnvironmentCubeMap, sampler_GlossyEnvironmentCubeMap, dir, 0).rgb;
    skyLight *= surfel.skyMask * _skyLightIntensity;

    // radiance from last frame
    float3 history = SampleSHVoxel3D(
        surfel.position, 
        surfel.albedo, 
        surfel.normal,
        _lastFrameCoefficientVoxel3D,
        _coefficientVoxelGridSize,
        _coefficientVoxelCorner,
        _coefficientVoxelSize
    );
    history *= _indirectIntensity;

    return directLight + skyLight + history;
}

[numthreads(32, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    uint surfelIndex = id.x * 16 + id.y;
    Surfel surfel = _surfels[surfelIndex];

    // mainlight property
    Light mainLight = GetMainLight();
    
    // direction from probe to surfel
    float3 dir = normalize(surfel.position - _probePos.xyz);
    
    float3 radiance = EvaluateSurfelRadiance(surfel, mainLight, dir);
    
    for (int index = 0; index < 9; index++)
    {
        // SH projection, put in loop to reduce register usage
        float3 ci = SHProject(index, dir) * radiance * 4.0 * PI / N;
        groupCoefficients[groupIndex] = ci;

        GroupMemoryBarrierWithGroupSync();

        // Parallel reduction
        for (uint stride = 256; stride > 0; stride >>= 1)
        {
            if (groupIndex < stride)
            {
                groupCoefficients[groupIndex] += groupCoefficients[groupIndex + stride];
            }

            GroupMemoryBarrierWithGroupSync();
        }

        // Storage to volume
        if (groupIndex == 0 && _indexInProbeVolume >= 0)
        {
            // Write to 3D texture using reduced coefficients
            int3 texCoord = ProbeIndexToTexture3DCoord(_indexInProbeVolume, index, _coefficientVoxelSize);
            _coefficientVoxel3D[texCoord] = groupCoefficients[0];
#ifdef _RELIGHT_DEBUG_RADIANCE
            _coefficientSH9[index * 3 + 0] = groupCoefficients[0].x;
            _coefficientSH9[index * 3 + 1] = groupCoefficients[0].y;
            _coefficientSH9[index * 3 + 2] = groupCoefficients[0].z;
#endif
        }

        GroupMemoryBarrierWithGroupSync();
    }
    
#ifdef _RELIGHT_DEBUG_RADIANCE
    _surfelRadiance[surfelIndex] = radiance;
#endif
}
