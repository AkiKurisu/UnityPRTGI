#pragma kernel CSMain

#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#pragma multi_compile _ _SHADOWS_SOFT _SHADOWS_SOFT_LOW _SHADOWS_SOFT_MEDIUM _SHADOWS_SOFT_HIGH

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
#include "SH.hlsl"

struct Surfel
{
    float3 position;
    float3 normal;
    float3 albedo;
    float skyMask;
};

RWStructuredBuffer<Surfel> _surfels;
RWStructuredBuffer<int> _coefficientSH9;
// Layout: [probeSizeX, probeSizeZ, probeSizeY * 9]
RWTexture3D<int3> _coefficientVoxel3D;
Texture3D<int3> _lastFrameCoefficientVoxel3D;

float _skyLightIntensity;
int _indexInProbeVolume;
float _indirectIntensity;
float _coefficientVoxelGridSize;
float4 _probePos;
float4 _coefficientVoxelCorner;
float4 _coefficientVoxelSize;

// =============================== Debugging =================================== //
RWStructuredBuffer<float3> _surfelRadiance;
// =============================== Debugging =================================== //

groupshared int3 groupCoefficients[9];

// Convert probe index to 3D texture coordinates
int3 ProbeIndexToTexture3DCoord(int probeIndex, int shIndex, float4 voxelSize)
{
    // Convert 1D probe index to 3D grid coordinates
    int probeSizeY = int(voxelSize.y);
    int probeSizeZ = int(voxelSize.z);
    
    int x = probeIndex / (probeSizeY * probeSizeZ);
    int temp = probeIndex % (probeSizeY * probeSizeZ);
    int y = temp / probeSizeZ;
    int z = temp % probeSizeZ;
    
    // Convert to 3D texture coordinates
    // Layout: [probeSizeX, probeSizeZ, probeSizeY * 9]
    int3 texCoord;
    texCoord.x = x;
    texCoord.y = z;  // Z becomes Y in texture
    texCoord.z = y * 9 + shIndex;  // Y * 9 + SH index
    
    return texCoord;
}

[numthreads(32, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    uint surfelIndex = id.x * 16 + id.y;
    // 初始化
    if (groupIndex == 0) {
        for (int i = 0; i < 9; i++) {
            groupCoefficients[i] = int3(0, 0, 0);
        }
    }
    GroupMemoryBarrierWithGroupSync();

    Surfel surfel = _surfels[surfelIndex];

    // mainlight property
    Light mainLight = GetMainLight();

    // mainlight shadow mask in URP
    float4 shadowCoord = TransformWorldToShadowCoord(surfel.position);
    float atten = SampleShadowmap(
        TEXTURE2D_ARGS(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), 
        shadowCoord, 
        GetMainLightShadowSamplingData(), 
        GetMainLightShadowParams(), 
        false
    );

    // radiance from light
    float NdotL = saturate(dot(surfel.normal, mainLight.direction));
    float3 radiance = surfel.albedo * mainLight.color * NdotL * atten * (1.0 - surfel.skyMask);
    
    // direction from probe to surfel
    float3 dir = normalize(surfel.position - _probePos.xyz);

    // radiance from sky
    float3 skyColor = SAMPLE_TEXTURECUBE_LOD(_GlossyEnvironmentCubeMap, sampler_GlossyEnvironmentCubeMap, dir, 0).rgb;
    radiance += skyColor * surfel.skyMask * _skyLightIntensity;  

    // radiance from last frame
    float3 history = float3(0, 0, 0);
    history = SampleSHVoxel3D(
        surfel.position, 
        surfel.albedo, 
        surfel.normal,
        _lastFrameCoefficientVoxel3D,
        _coefficientVoxelGridSize,
        _coefficientVoxelCorner,
        _coefficientVoxelSize
    );
    radiance += history * _indirectIntensity;

    // SH projection
    const float N = 32 * 16;
    float3 c[9];
    c[0] = SH(0, 0, dir) * radiance * 4.0 * PI / N;
    c[1] = SH(1, -1, dir) * radiance * 4.0 * PI / N;
    c[2] = SH(1, 0, dir) * radiance * 4.0 * PI / N;
    c[3] = SH(1, 1, dir) * radiance * 4.0 * PI / N;
    c[4] = SH(2, -2, dir) * radiance * 4.0 * PI / N;
    c[5] = SH(2, -1, dir) * radiance * 4.0 * PI / N;
    c[6] = SH(2, 0, dir) * radiance * 4.0 * PI / N;
    c[7] = SH(2, 1, dir) * radiance * 4.0 * PI / N;
    c[8] = SH(2, 2, dir) * radiance * 4.0 * PI / N;

    for (int i = 0; i < 9; i++) 
    {
        int3 encoded = int3(EncodeFloatToInt(c[i].x), EncodeFloatToInt(c[i].y), EncodeFloatToInt(c[i].z));
        InterlockedAdd(groupCoefficients[i].x, encoded.x);
        InterlockedAdd(groupCoefficients[i].y, encoded.y);
        InterlockedAdd(groupCoefficients[i].z, encoded.z);
    }

    GroupMemoryBarrierWithGroupSync();

    // storage to volume
    if (groupIndex == 0 && _indexInProbeVolume >= 0)
    {
        // Write to 3D texture using reduced coefficients
        for (int i = 0; i < 9; i++)
        {
            int3 texCoord = ProbeIndexToTexture3DCoord(_indexInProbeVolume, i, _coefficientVoxelSize);
            _coefficientVoxel3D[texCoord] = _coefficientVoxel3D[texCoord] + groupCoefficients[i];
            _coefficientSH9[i * 3 + 0] += groupCoefficients[i].x;
            _coefficientSH9[i * 3 + 1] += groupCoefficients[i].y;
            _coefficientSH9[i * 3 + 2] += groupCoefficients[i].z;
        }
    }
    
    // for debug
    _surfelRadiance[surfelIndex] = radiance;
}
